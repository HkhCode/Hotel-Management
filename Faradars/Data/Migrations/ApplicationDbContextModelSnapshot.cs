// <auto-generated />
using System;
using Faradars.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Faradars.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Faradars.Models.DB.DargahPardakht", b =>
                {
                    b.Property<int>("DargahPardakht_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DargahPardakht_Code")
                        .HasMaxLength(100);

                    b.Property<string>("DargahPardakht_NameBank")
                        .HasMaxLength(100);

                    b.HasKey("DargahPardakht_ID");

                    b.ToTable("dargahPardakhts");
                });

            modelBuilder.Entity("Faradars.Models.DB.EmkanatHotel", b =>
                {
                    b.Property<int>("Emkanat_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Emkanat_Icon")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("Emkanat_IdHotel");

                    b.Property<string>("Emkanat_Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Emkanat_ID");

                    b.HasIndex("Emkanat_IdHotel");

                    b.ToTable("emkanatHotels");
                });

            modelBuilder.Entity("Faradars.Models.DB.Hotels", b =>
                {
                    b.Property<int>("Hotel_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adres")
                        .HasMaxLength(350);

                    b.Property<bool>("Faal");

                    b.Property<long>("Jozeyat_Gheymat");

                    b.Property<string>("Name_Hotel")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Tozihat")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<DateTime>("ZamanPayan");

                    b.Property<DateTime>("ZamanShoroa");

                    b.HasKey("Hotel_ID");

                    b.ToTable("hotels");
                });

            modelBuilder.Entity("Faradars.Models.DB.JozeyatHotel", b =>
                {
                    b.Property<int>("Jozeyat_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Jozeyat_HotelID");

                    b.Property<int>("Jozeyat_OstanID");

                    b.Property<int>("Jozeyat_Teadad");

                    b.Property<int>("Jozeyat_TedadStareID");

                    b.Property<int>("Jozeyat_TedadTakhtID");

                    b.Property<int>("Jozeyat_ZarfiatOtaghID");

                    b.Property<int?>("ZarfyatOtaghHotel");

                    b.HasKey("Jozeyat_ID");

                    b.HasIndex("Jozeyat_HotelID");

                    b.HasIndex("Jozeyat_OstanID");

                    b.HasIndex("Jozeyat_TedadStareID");

                    b.HasIndex("Jozeyat_TedadTakhtID");

                    b.HasIndex("ZarfyatOtaghHotel");

                    b.ToTable("jozeyatHotels");
                });

            modelBuilder.Entity("Faradars.Models.DB.Nazarat", b =>
                {
                    b.Property<int>("Nazarat_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nazarat_Email")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("Nazarat_Emtyaz");

                    b.Property<int>("Nazarat_HotelID");

                    b.Property<string>("Nazarat_Matn")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("Nazarat_Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Nazarat_Zaman")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Nazarat_ID");

                    b.HasIndex("Nazarat_HotelID");

                    b.ToTable("nazarats");
                });

            modelBuilder.Entity("Faradars.Models.DB.OstanHotel", b =>
                {
                    b.Property<int>("Ostan_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Ostan_Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Ostan_ID");

                    b.ToTable("ostanHotels");
                });

            modelBuilder.Entity("Faradars.Models.DB.PardakhtHotel", b =>
                {
                    b.Property<int>("Pardakh_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Pardakh_IDHotel");

                    b.Property<long>("Pardakh_Mablagh");

                    b.Property<string>("Pardakh_Marjaa")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Pardakh_Pigiry")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.Property<int>("Pardakh_Rezerv");

                    b.Property<string>("Pardakh_Trakonesh")
                        .HasMaxLength(50);

                    b.Property<bool>("Pardakh_Vazeiat");

                    b.Property<DateTime>("Pardakh_ZamanVariz");

                    b.HasKey("Pardakh_ID");

                    b.HasIndex("Pardakh_IDHotel");

                    b.HasIndex("Pardakh_Rezerv");

                    b.ToTable("pardakhtHotels");
                });

            modelBuilder.Entity("Faradars.Models.DB.RezervHotel", b =>
                {
                    b.Property<int>("Rezerv_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Rezerv_Codemeli")
                        .HasMaxLength(10);

                    b.Property<string>("Rezerv_Email")
                        .HasMaxLength(100);

                    b.Property<int>("Rezerv_IDHotel");

                    b.Property<string>("Rezerv_IP")
                        .HasMaxLength(100);

                    b.Property<int>("Rezerv_Jensiat");

                    b.Property<DateTime>("Rezerv_Khoroj");

                    b.Property<long>("Rezerv_Mablagh");

                    b.Property<string>("Rezerv_Mobile")
                        .HasMaxLength(11);

                    b.Property<string>("Rezerv_Name")
                        .HasMaxLength(100);

                    b.Property<string>("Rezerv_NameKhanevadgi")
                        .HasMaxLength(100);

                    b.Property<int>("Rezerv_Roz");

                    b.Property<int>("Rezerv_TeadadNafarat");

                    b.Property<int>("Rezerv_TeadadOthagh");

                    b.Property<bool>("Rezerv_Vazeyt");

                    b.Property<DateTime>("Rezerv_Vorod");

                    b.HasKey("Rezerv_ID");

                    b.HasIndex("Rezerv_IDHotel");

                    b.ToTable("rezervHotels");
                });

            modelBuilder.Entity("Faradars.Models.DB.TanzimatEmail", b =>
                {
                    b.Property<int>("Eamil_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Eamil_EmailSend")
                        .HasMaxLength(100);

                    b.Property<string>("Eamil_Password")
                        .HasMaxLength(100);

                    b.Property<string>("Eamil_Port")
                        .HasMaxLength(100);

                    b.Property<string>("Eamil_Smtp")
                        .HasMaxLength(100);

                    b.Property<string>("Eamil_UserName")
                        .HasMaxLength(100);

                    b.HasKey("Eamil_ID");

                    b.ToTable("tanzimatEmails");
                });

            modelBuilder.Entity("Faradars.Models.DB.TasavirHotel", b =>
                {
                    b.Property<int>("Tasavir_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Tasavir_Asli");

                    b.Property<int>("Tasavir_IDHotel");

                    b.Property<string>("Tasavir_Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("Tasavir_ID");

                    b.HasIndex("Tasavir_IDHotel");

                    b.ToTable("tasavirHotels");
                });

            modelBuilder.Entity("Faradars.Models.DB.TedadStareh", b =>
                {
                    b.Property<int>("TedadStareh_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TedadStareh_Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("TedadStareh_ID");

                    b.ToTable("tedadStarehs");
                });

            modelBuilder.Entity("Faradars.Models.DB.TedadTakhtHotel", b =>
                {
                    b.Property<int>("TedadTakh_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("TedadTakh_Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("TedadTakh_ID");

                    b.ToTable("tedadTakhtHotels");
                });

            modelBuilder.Entity("Faradars.Models.DB.ZarfyatOtaghHotel", b =>
                {
                    b.Property<int>("ZarfyatOtagh_ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ZarfyatOtagh_Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("ZarfyatOtagh_ID");

                    b.ToTable("zarfyatOtaghHotels");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Faradars.Models.DB.EmkanatHotel", b =>
                {
                    b.HasOne("Faradars.Models.DB.Hotels", "HotelEmkanat")
                        .WithMany("EmkanatHotels")
                        .HasForeignKey("Emkanat_IdHotel")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Faradars.Models.DB.JozeyatHotel", b =>
                {
                    b.HasOne("Faradars.Models.DB.Hotels", "Hoteljoz")
                        .WithMany("JozeyatHotels")
                        .HasForeignKey("Jozeyat_HotelID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Faradars.Models.DB.OstanHotel", "OstanHotel")
                        .WithMany("JozeyatOstan")
                        .HasForeignKey("Jozeyat_OstanID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Faradars.Models.DB.TedadStareh", "TedadStareh")
                        .WithMany("JozeyatStareh")
                        .HasForeignKey("Jozeyat_TedadStareID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Faradars.Models.DB.TedadTakhtHotel", "TedadTakhtHotel")
                        .WithMany("JozeyatTakht")
                        .HasForeignKey("Jozeyat_TedadTakhtID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Faradars.Models.DB.ZarfyatOtaghHotel", "ZarfyatOtagh")
                        .WithMany("Jozeyats")
                        .HasForeignKey("ZarfyatOtaghHotel");
                });

            modelBuilder.Entity("Faradars.Models.DB.Nazarat", b =>
                {
                    b.HasOne("Faradars.Models.DB.Hotels", "HotelNazar")
                        .WithMany("Nazarats")
                        .HasForeignKey("Nazarat_HotelID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Faradars.Models.DB.PardakhtHotel", b =>
                {
                    b.HasOne("Faradars.Models.DB.Hotels", "HotelPardakht")
                        .WithMany("PardakhtHotels")
                        .HasForeignKey("Pardakh_IDHotel")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Faradars.Models.DB.RezervHotel", "RezervHotel")
                        .WithMany("PardakhtHotels")
                        .HasForeignKey("Pardakh_Rezerv")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Faradars.Models.DB.RezervHotel", b =>
                {
                    b.HasOne("Faradars.Models.DB.Hotels", "HotelsHotel_ID")
                        .WithMany("RezervHotels")
                        .HasForeignKey("Rezerv_IDHotel")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Faradars.Models.DB.TasavirHotel", b =>
                {
                    b.HasOne("Faradars.Models.DB.Hotels", "Hoteltasvir")
                        .WithMany("TasavirHotels")
                        .HasForeignKey("Tasavir_IDHotel")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
